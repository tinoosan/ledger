openapi: 3.0.3
info:
  title: Ledger Service API
  version: 0.1.0
  description: Validation + storage service for journal entries and accounts
servers:
  - url: http://localhost:8080
    description: Local development
paths:
  /healthz:
    get:
      summary: Liveness probe
      operationId: healthz
      tags: [ops]
      responses:
        '200': { description: OK }
  /readyz:
    get:
      summary: Readiness probe
      operationId: readyz
      tags: [ops]
      responses:
        '200': { description: OK }

  /v1/dictionary/groups:
    get:
      summary: Curated groups per account type
      operationId: getGroupsDictionary
      tags: [dictionary]
      parameters:
        - in: query
          name: type
          required: false
          schema: { $ref: '#/components/schemas/AccountType' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        type: { $ref: '#/components/schemas/AccountType' }
                        groups:
                          type: array
                          items:
                            type: object
                            properties:
                              code: { type: string, example: "credit_card" }
                              label: { type: string, example: "Credit Card" }
                              reserved: { type: boolean, example: false }

  /entries:
    get:
      summary: List journal entries
      operationId: listEntries
      tags: [entries]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: currency
          required: false
          schema: { type: string }
        - in: query
          name: memo
          required: false
          schema: { type: string }
        - in: query
          name: category
          required: false
          schema: { $ref: '#/components/schemas/Category' }
        - in: query
          name: is_reversed
          required: false
          schema: { type: boolean }
        - in: query
          name: from
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: to
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/JournalEntryResponse' }
                  next_cursor: { type: string }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '500': { description: Internal server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
    post:
      summary: Create a journal entry
      operationId: createEntry
      tags: [entries]
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string }
          description: Optional key to make POST idempotent per user. If the same key is reused, the original entry is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/JournalEntryRequest' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/JournalEntryResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422': { description: Unprocessable (validation), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '500': { description: Internal server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/entries/batch:
    post:
      summary: Batch create journal entries
      operationId: batchCreateEntries
      tags: [entries]
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
          description: Required for batch idempotency; applies to the entire batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items: { $ref: '#/components/schemas/JournalEntryRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items: { $ref: '#/components/schemas/JournalEntryResponse' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '415': { description: Unsupported Media Type, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: Conflict (idempotency mismatch), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422':
          description: Unprocessable (no write; per-item errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: { $ref: '#/components/schemas/BatchErrorItem' }

  /entries/{id}:
    get:
      summary: Get one journal entry
      operationId: getEntry
      tags: [entries]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/JournalEntryResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /entries/reverse:
    post:
      summary: Reverse a journal entry
      operationId: reverseEntry
      tags: [entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, entry_id]
              properties:
                user_id: { $ref: '#/components/schemas/UUID' }
                entry_id: { $ref: '#/components/schemas/UUID' }
                date:
                  type: string
                  format: date-time
                  description: Optional override date for the reversal (defaults to now)
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/JournalEntryResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
  
  /entries/reclassify:
    post:
      summary: Reclassify a journal entry (reverse + correct)
      operationId: reclassifyEntry
      tags: [entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, entry_id, lines]
              properties:
                user_id: { $ref: '#/components/schemas/UUID' }
                entry_id: { $ref: '#/components/schemas/UUID' }
                date: { type: string, format: date-time }
                memo: { type: string }
                category: { $ref: '#/components/schemas/Category' }
                metadata:
                  type: object
                  additionalProperties: { type: string }
                lines:
                  type: array
                  minItems: 2
                  items: { $ref: '#/components/schemas/JournalLineRequest' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/JournalEntryResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422': { description: Unprocessable (validation), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}


  /v1/trial-balance:
    get:
      summary: Trial balance
      operationId: trialBalance
      tags: [reports]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: as_of
          required: false
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TrialBalanceResponse' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/accounts:
    get:
      summary: List accounts
      operationId: listAccounts
      tags: [accounts]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: name
          required: false
          schema: { type: string }
        - in: query
          name: currency
          required: false
          schema: { type: string }
        - in: query
          name: group
          required: false
          schema: { type: string }
        - in: query
          name: vendor
          required: false
          schema: { type: string }
        - in: query
          name: type
          required: false
          schema: { $ref: '#/components/schemas/AccountType' }
        - in: query
          name: system
          required: false
          schema: { type: boolean }
        - in: query
          name: active
          required: false
          schema: { type: boolean }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/AccountResponse' }}}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
    post:
      summary: Create an account
      operationId: createAccount
      tags: [accounts]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AccountRequest' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/AccountResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/accounts/batch:
    post:
      summary: Batch create accounts
      operationId: batchCreateAccounts
      tags: [accounts]
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
          description: Required for batch idempotency; applies to the entire batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, accounts]
              properties:
                user_id: { $ref: '#/components/schemas/UUID' }
                accounts:
                  type: array
                  items: { $ref: '#/components/schemas/AccountRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items: { $ref: '#/components/schemas/AccountResponse' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '415': { description: Unsupported Media Type, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: Conflict (idempotency mismatch), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422':
          description: Unprocessable (no write; per-item errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: { $ref: '#/components/schemas/BatchErrorItem' }

  /v1/entries:batch:
    post:
      summary: Batch create journal entries (alias)
      operationId: batchCreateEntriesAlias
      tags: [entries]
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
          description: Required for batch idempotency; applies to the entire batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items: { $ref: '#/components/schemas/JournalEntryRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items: { $ref: '#/components/schemas/JournalEntryResponse' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '415': { description: Unsupported Media Type, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: Conflict (idempotency mismatch), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422':
          description: Unprocessable (no write; per-item errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: { $ref: '#/components/schemas/BatchErrorItem' }

  /v1/accounts:batch:
    post:
      summary: Batch create accounts (alias)
      operationId: batchCreateAccountsAlias
      tags: [accounts]
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
          description: Required for batch idempotency; applies to the entire batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, accounts]
              properties:
                user_id: { $ref: '#/components/schemas/UUID' }
                accounts:
                  type: array
                  items: { $ref: '#/components/schemas/AccountRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items: { $ref: '#/components/schemas/AccountResponse' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '415': { description: Unsupported Media Type, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: Conflict (idempotency mismatch), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '422':
          description: Unprocessable (no write; per-item errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items: { $ref: '#/components/schemas/BatchErrorItem' }

  /v1/accounts/opening-balances:
    get:
      summary: Get or create the Opening Balances account for a currency
      operationId: getOpeningBalancesAccount
      tags: [accounts]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: currency
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AccountResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/accounts/{id}:
    get:
      summary: Get an account
      operationId: getAccount
      tags: [accounts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AccountResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
    patch:
      summary: Update an account (mutable fields only)
      operationId: updateAccount
      tags: [accounts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AccountUpdateRequest' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/AccountResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '403': { description: Forbidden (system account), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '409': { description: Conflict (duplicate path), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
    delete:
      summary: Deactivate an account (soft delete)
      operationId: deactivateAccount
      tags: [accounts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
      responses:
        '204': { description: No Content }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '403': { description: Forbidden (system account), content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/accounts/{id}/balance:
    get:
      summary: Get account balance
      operationId: getAccountBalance
      tags: [accounts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: as_of
          required: false
          schema: { type: string, format: date-time }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AccountBalanceResponse' }}}}
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

  /v1/accounts/{id}/ledger:
    get:
      summary: Get account ledger feed
      operationId: getAccountLedger
      tags: [accounts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: user_id
          required: true
          schema: { $ref: '#/components/schemas/UUID' }
        - in: query
          name: from
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: to
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountLedgerResponse' }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' }}}}

components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: 11111111-1111-1111-1111-111111111111
    MoneyMinor:
      type: integer
      format: int64
      description: Amount in minor units (e.g., cents for USD)
      example: 1500
    Side:
      type: string
      enum: [debit, credit]
    Category:
      type: string
      enum: [uncategorized, general, eating_out, groceries, transport, shopping, entertainment, bills, travel, expenses, income, transfers, savings, charity, family, gifts, personal_care, business]
    AccountType:
      type: string
      enum: [asset, liability, equity, revenue, expense]

    JournalLineRequest:
      type: object
      required: [account_id, side, amount_minor]
      properties:
        account_id: { $ref: '#/components/schemas/UUID' }
        side: { $ref: '#/components/schemas/Side' }
        amount_minor: { $ref: '#/components/schemas/MoneyMinor' }
    JournalLineResponse:
      allOf:
        - $ref: '#/components/schemas/JournalLineRequest'
        - type: object
          required: [id]
          properties:
            id: { $ref: '#/components/schemas/UUID' }
            amount:
              type: string
              description: Decimal amount in major units

    JournalEntryRequest:
      type: object
      required: [user_id, date, currency, lines]
      properties:
        user_id: { $ref: '#/components/schemas/UUID' }
        date:
          type: string
          format: date-time
          description: RFC3339 timestamp
        currency:
          type: string
          description: ISO 4217 currency code
          example: USD
        memo: { type: string }
        category: { $ref: '#/components/schemas/Category' }
        lines:
          type: array
          minItems: 2
          items: { $ref: '#/components/schemas/JournalLineRequest' }
    JournalEntryResponse:
      type: object
      required: [id, user_id, date, currency, lines]
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        user_id: { $ref: '#/components/schemas/UUID' }
        date: { type: string, format: date-time }
        currency: { type: string }
        memo: { type: string }
        category: { $ref: '#/components/schemas/Category' }
        metadata:
          type: object
          additionalProperties: { type: string }
        is_reversed:
          type: boolean
          description: True if the entry has been reversed
        lines:
          type: array
          items: { $ref: '#/components/schemas/JournalLineResponse' }

    AccountRequest:
      type: object
      required: [user_id, name, currency, type, group, vendor]
      properties:
        user_id: { $ref: '#/components/schemas/UUID' }
        name: { type: string }
        currency: { type: string, description: ISO 4217 currency code }
        type: { $ref: '#/components/schemas/AccountType' }
        group:
          type: string
          description: "Subtype slug, e.g. bank | credit_card | cash | opening_balances"
        vendor:
          type: string
          description: "Institution/identifier, e.g. Monzo | Amex | PayPal"
        system:
          type: boolean
          description: Reserved system account (immutable); when true, path must be equity:openingbalances:system
        metadata:
          type: object
          additionalProperties: { type: string }
    AccountUpdateRequest:
      type: object
      properties:
        name: { type: string }
        group: { type: string }
        vendor: { type: string }
        metadata:
          type: object
          additionalProperties: { type: string }
    AccountResponse:
      allOf:
        - $ref: '#/components/schemas/AccountRequest'
        - type: object
          required: [id]
          properties:
            id: { $ref: '#/components/schemas/UUID' }
            path:
              type: string
              description: Derived identifier type:group:vendorSlug (lowercase)
              example: assets:bank:monzo
            metadata:
              type: object
              additionalProperties:
                type: string
            active:
              type: boolean

    BatchErrorItem:
      type: object
      properties:
        index: { type: integer }
        code: { type: string }
        error: { type: string }

    AccountBalanceResponse:
      type: object
      properties:
        user_id: { $ref: '#/components/schemas/UUID' }
        account_id: { $ref: '#/components/schemas/UUID' }
        as_of: { type: string, format: date-time }
        currency: { type: string }
        balance_minor: { type: integer, format: int64 }
        balance:
          type: string
          description: Decimal balance in major units

    AccountLedgerItem:
      type: object
      properties:
        date: { type: string, format: date-time }
        entry_id: { $ref: '#/components/schemas/UUID' }
        line_id: { $ref: '#/components/schemas/UUID' }
        side: { $ref: '#/components/schemas/Side' }
        amount_minor: { type: integer, format: int64 }
        amount:
          type: string
          description: Decimal amount in major units
        running_balance_minor: { type: integer, format: int64 }
        running_balance:
          type: string
          description: Decimal running balance in major units
    AccountLedgerResponse:
      type: object
      properties:
        user_id: { $ref: '#/components/schemas/UUID' }
        account_id: { $ref: '#/components/schemas/UUID' }
        currency: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/AccountLedgerItem' }
        next_cursor: { type: string }

    TrialBalanceAccount:
      type: object
      properties:
        account_id: { $ref: '#/components/schemas/UUID' }
        name: { type: string }
        path: { type: string }
        currency: { type: string }
        type: { $ref: '#/components/schemas/AccountType' }
        debit_minor: { type: integer, format: int64 }
        credit_minor: { type: integer, format: int64 }
        debit:
          type: string
          description: Decimal debit amount in major units
        credit:
          type: string
          description: Decimal credit amount in major units
    TrialBalanceCurrencyGroup:
      type: object
      properties:
        currency: { type: string }
        accounts:
          type: array
          items: { $ref: '#/components/schemas/TrialBalanceAccount' }
    TrialBalanceResponse:
      type: object
      properties:
        user_id: { $ref: '#/components/schemas/UUID' }
        as_of: { type: string, format: date-time }
        groups:
          type: array
          items: { $ref: '#/components/schemas/TrialBalanceCurrencyGroup' }

    Error:
      type: object
      required: [error]
      properties:
        error: { type: string }
        code: { type: string }
