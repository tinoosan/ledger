openapi: 3.0.3
info:
  title: Ledger Service API
  version: 0.1.0
  description: >-
    Validation + storage service for journal entries.
servers:
  - url: http://localhost:8080
    description: Local development
paths:
  /entries:
    get:
      summary: List journal entries
      description: Returns all journal entries for a given user.
      operationId: listEntries
      tags:
        - entries
      parameters:
        - in: query
          name: user_id
          required: true
          description: ID of the user whose entries to fetch
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JournalEntryResponse'
        '400':
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a journal entry
      description: >-
        Accepts a journal entry with N lines, enforces invariants, writes atomically,
        and returns the posted entry.
      operationId: createEntry
      tags:
        - entries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalEntryRequest'
            examples:
              example:
                value:
                  user_id: 11111111-1111-1111-1111-111111111111
                  date: 2025-09-27T12:00:00Z
                  currency: USD
                  memo: Lunch
                  category: eating_out
                  client_entry_id: dev-1
                  lines:
                    - account_id: 22222222-2222-2222-2222-222222222222
                      side: debit
                      amount_minor: 1500
                    - account_id: 33333333-3333-3333-3333-333333333333
                      side: credit
                      amount_minor: 1500
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalEntryResponse'
        '400':
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: 11111111-1111-1111-1111-111111111111
    MoneyMinor:
      type: integer
      format: int64
      description: Amount in minor units (e.g., cents for USD)
      example: 1500
    Side:
      type: string
      enum: [debit, credit]
    Category:
      type: string
      enum:
        - uncategorized
        - general
        - eating_out
        - groceries
        - transport
        - shopping
        - entertainment
        - bills
        - travel
        - expenses
        - income
        - transfers
        - savings
        - charity
        - family
        - gifts
        - personal_care
        - business
    JournalLineRequest:
      type: object
      required: [account_id, side, amount_minor]
      properties:
        account_id:
          $ref: '#/components/schemas/UUID'
        side:
          $ref: '#/components/schemas/Side'
        amount_minor:
          $ref: '#/components/schemas/MoneyMinor'
    JournalLineResponse:
      allOf:
        - $ref: '#/components/schemas/JournalLineRequest'
        - type: object
          required: [id]
          properties:
            id:
              $ref: '#/components/schemas/UUID'
    JournalEntryRequest:
      type: object
      required: [user_id, date, currency, lines]
      properties:
        user_id:
          $ref: '#/components/schemas/UUID'
        date:
          type: string
          format: date-time
          description: RFC3339 timestamp
        currency:
          type: string
          description: ISO 4217 currency code
          example: USD
        memo:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        client_entry_id:
          type: string
        lines:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/JournalLineRequest'
    JournalEntryResponse:
      type: object
      required: [id, user_id, date, currency, lines]
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        user_id:
          $ref: '#/components/schemas/UUID'
        date:
          type: string
          format: date-time
        currency:
          type: string
        memo:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        client_entry_id:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/JournalLineResponse'
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: sum(debits) must equal sum(credits)
